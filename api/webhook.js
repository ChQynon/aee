// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Telegram
const TelegramBot = require('node-telegram-bot-api');
const token = '7417777601:AAGy92M0pjoizRHILNT7d72xMNf8a0BkKK8';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const STATES = {
  IDLE: 'idle',
  AWAITING_NAME: 'awaiting_name',
  AWAITING_AGE: 'awaiting_age',
  AWAITING_TIMEZONE: 'awaiting_timezone',
  AWAITING_MINECRAFT_VERSION: 'awaiting_minecraft_version',
  AWAITING_MINECRAFT_TYPE: 'awaiting_minecraft_type',
  AWAITING_WHY_US: 'awaiting_why_us',
  AWAITING_ABOUT_YOURSELF: 'awaiting_about_yourself',
  CONFIRMATION: 'confirmation'
};

// ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
const GROUP_CHAT_ID = '-1001922624396'; 

// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
const ADMIN_IDS = [1103834712, 1103834713]; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–Ω–∫–µ—Ç
const userStates = {};
const userForms = {};
const pendingForms = {};
const processedForms = { accepted: [], rejected: [] };

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
module.exports = async (req, res) => {
  try {
    // –î–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
    if (req.method === 'GET') {
      return res.status(200).json({ status: 'Bot is running' });
    }
    
    // –î–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram
    if (req.method === 'POST') {
      const update = req.body;
      console.log('WEBHOOK:', JSON.stringify(update).slice(0, 200));
      
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const bot = new TelegramBot(token);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (update.message && update.message.text) {
        const chatId = update.message.chat.id;
        const text = update.message.text;
        const userId = update.message.from.id;
        const username = update.message.from.username || `user${userId}`;
        
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${text} –æ—Ç ${chatId}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (text === '/start') {
          userStates[chatId] = STATES.IDLE;
          await bot.sendMessage(chatId, 
            "üçÇ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –≤ —Ö–∞—É—Å Sunset!\n\n" +
            "–ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É, –∏ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É. –ù–∞—á–Ω–µ–º?",
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üçÇ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data: "start_form" }]
                ]
              }
            }
          );
        } else if (text === '/list' && isAdmin(userId)) {
          // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–Ω–∫–µ—Ç
          const pendingCount = Object.keys(pendingForms).length;
          if (pendingCount === 0) {
            await bot.sendMessage(chatId, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–Ω–∫–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.");
            return;
          }
          
          await bot.sendMessage(chatId, `–û–∂–∏–¥–∞—é—â–∏–µ –∞–Ω–∫–µ—Ç—ã (${pendingCount}):`);
          
          for (const [userId, formData] of Object.entries(pendingForms)) {
            const { userData } = formData;
            await bot.sendMessage(
              chatId,
              generateApplicationMessage(userData.username, userData.form),
              {
                parse_mode: "HTML",
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `accept_${userId}` },
                      { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_${userId}` }
                    ]
                  ]
                }
              }
            );
          }
        } else {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await handleTextMessage(bot, chatId, text, update.message.from);
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
      if (update.callback_query) {
        const callbackQuery = update.callback_query;
        const userId = callbackQuery.from.id;
        const chatId = callbackQuery.message.chat.id;
        const data = callbackQuery.data;
        
        await handleCallbackQuery(bot, chatId, data, callbackQuery, userId);
      }
      
      return res.status(200).send('OK');
    }
    
    // –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
    return res.status(405).json({ error: 'Method not allowed' });
    
  } catch (error) {
    console.error('–û–®–ò–ë–ö–ê:', error);
    return res.status(500).json({
      error: String(error),
      location: 'webhook handler',
      stack: error.stack
    });
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin(userId) {
  return ADMIN_IDS.includes(userId);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∫–µ—Ç–æ–π
function generateApplicationMessage(username, form) {
  return `<b>üìù –ù–û–í–ê–Ø –ê–ù–ö–ï–¢–ê</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${username}

<b>–ò–º—è:</b> ${form.name}
<b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${form.age}
<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> ${form.timezone}
<b>–í–µ—Ä—Å–∏—è Minecraft:</b> ${form.minecraft_version}
<b>–¢–∏–ø Minecraft:</b> ${form.minecraft_type}
<b>–ü–æ—á–µ–º—É –Ω–∞—à —Ö–∞—É—Å:</b> ${form.why_us}
<b>–û —Å–µ–±–µ:</b> ${form.about_yourself}`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleTextMessage(bot, chatId, text, from) {
  const userId = from.id;
  const username = from.username || `user${userId}`;
  
  // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º IDLE
  if (!userStates[chatId]) {
    userStates[chatId] = STATES.IDLE;
    await bot.sendMessage(chatId, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å /start");
    return;
  }
  
  switch (userStates[chatId]) {
    case STATES.AWAITING_NAME:
      userForms[chatId].name = text;
      userStates[chatId] = STATES.AWAITING_AGE;
      await bot.sendMessage(chatId, "üçÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?");
      break;
      
    case STATES.AWAITING_AGE:
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ —è–≤–ª—è—é—Ç—Å—è –≤–æ–∑—Ä–∞—Å—Ç–æ–º
      const ageMatch = text.match(/\d+/);
      const age = ageMatch ? parseInt(ageMatch[0]) : 0;
      
      if (age < 12) {
        await bot.sendMessage(chatId, 
          "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏, –Ω–æ –≤ –Ω–∞—à —Ö–∞—É—Å –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –æ—Ç 12 –ª–µ—Ç. " +
          "–¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –ø–æ–¥—Ä–∞—Å—Ç–µ—à—å!"
        );
        userStates[chatId] = STATES.IDLE;
        delete userForms[chatId];
        return;
      }
      
      userForms[chatId].age = text;
      userStates[chatId] = STATES.AWAITING_TIMEZONE;
      await bot.sendMessage(chatId, "üçÇ –£–∫–∞–∂–∏ —Å–≤–æ–π –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–°–ö, –ú–°–ö+1 –∏ —Ç.–¥.):");
      break;
      
    case STATES.AWAITING_TIMEZONE:
      userForms[chatId].timezone = text;
      userStates[chatId] = STATES.AWAITING_MINECRAFT_VERSION;
      await bot.sendMessage(chatId, "üçÇ –ö–∞–∫—É—é –≤–µ—Ä—Å–∏—é Minecraft —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å?");
      break;
      
    case STATES.AWAITING_MINECRAFT_VERSION:
      userForms[chatId].minecraft_version = text;
      userStates[chatId] = STATES.AWAITING_MINECRAFT_TYPE;
      await bot.sendMessage(chatId, "üçÇ –ö–∞–∫–æ–π —Ç–∏–ø Minecraft —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å? (Java –∏–ª–∏ Bedrock)");
      break;
      
    case STATES.AWAITING_MINECRAFT_TYPE:
      const type = text.toLowerCase();
      
      if (type.includes('java') || type.includes('–¥–∂–∞–≤–∞') || type.includes('java edition')) {
        userForms[chatId].minecraft_type = "Java";
      } else if (type.includes('bedrock') || type.includes('–±–µ–¥—Ä–æ–∫') || type.includes('pe') || type.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || type.includes('phone')) {
        userForms[chatId].minecraft_type = "Bedrock";
      } else {
        userForms[chatId].minecraft_type = text;
      }
      
      userStates[chatId] = STATES.AWAITING_WHY_US;
      await bot.sendMessage(chatId, "üçÇ –ü–æ—á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –∫ –Ω–∞—à–µ–º—É —Ö–∞—É—Å—É?");
      break;
      
    case STATES.AWAITING_WHY_US:
      userForms[chatId].why_us = text;
      userStates[chatId] = STATES.AWAITING_ABOUT_YOURSELF;
      await bot.sendMessage(chatId, "üçÇ –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:");
      break;
      
    case STATES.AWAITING_ABOUT_YOURSELF:
      userForms[chatId].about_yourself = text;
      userStates[chatId] = STATES.CONFIRMATION;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π
      const formMessage = `<b>üìù –¢–í–û–Ø –ê–ù–ö–ï–¢–ê</b>

<b>–ò–º—è:</b> ${userForms[chatId].name}
<b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${userForms[chatId].age}
<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> ${userForms[chatId].timezone}
<b>–í–µ—Ä—Å–∏—è Minecraft:</b> ${userForms[chatId].minecraft_version}
<b>–¢–∏–ø Minecraft:</b> ${userForms[chatId].minecraft_type}
<b>–ü–æ—á–µ–º—É –Ω–∞—à —Ö–∞—É—Å:</b> ${userForms[chatId].why_us}
<b>–û —Å–µ–±–µ:</b> ${userForms[chatId].about_yourself}

–í—Å–µ –≤–µ—Ä–Ω–æ?`;
      
      await bot.sendMessage(chatId, formMessage, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "confirm_form" },
              { text: "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data: "restart_form" }
            ]
          ]
        }
      });
      break;
      
    default:
      await bot.sendMessage(chatId, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å /start");
      break;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
async function handleCallbackQuery(bot, chatId, data, callbackQuery, userId) {
  // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
  if (data === "start_form") {
    userStates[chatId] = STATES.AWAITING_NAME;
    userForms[chatId] = {};
    
    await bot.answerCallbackQuery(callbackQuery.id);
    await bot.sendMessage(chatId, "üçÇ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?");
  }
  // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
  else if (data === "confirm_form") {
    await bot.answerCallbackQuery(callbackQuery.id);
    
    const username = callbackQuery.from.username || `user${userId}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É –≤ –æ–∂–∏–¥–∞—é—â–∏–µ
    pendingForms[userId] = {
      userData: {
        username: username,
        form: userForms[chatId]
      },
      adminMessages: {},
      userChatId: chatId
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for (const adminId of ADMIN_IDS) {
      try {
        const applicationMessage = generateApplicationMessage(username, userForms[chatId]);
        const msg = await bot.sendMessage(
          adminId,
          applicationMessage,
          {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `accept_${userId}` },
                  { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_${userId}` }
                ]
              ]
            }
          }
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        pendingForms[userId].adminMessages[adminId] = {
          chat_id: adminId,
          message_id: msg.message_id
        };
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã –∞–¥–º–∏–Ω—É ${adminId}: ${error}`);
      }
    }
    
    await bot.sendMessage(
      chatId,
      "‚úÖ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ! –ú—ã —Å–æ–æ–±—â–∏–º —Ç–µ–±–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ."
    );
    
    userStates[chatId] = STATES.IDLE;
  }
  // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ
  else if (data === "restart_form") {
    userStates[chatId] = STATES.AWAITING_NAME;
    userForms[chatId] = {};
    
    await bot.answerCallbackQuery(callbackQuery.id);
    await bot.sendMessage(chatId, "üçÇ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?");
  }
  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  else if (data.startsWith('accept_')) {
    const targetUserId = data.split('_')[1];
    const adminId = callbackQuery.from.id;
    const adminUsername = callbackQuery.from.username || `ID: ${adminId}`;
    
    if (!isAdmin(userId)) {
      await bot.answerCallbackQuery(callbackQuery.id, { text: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è" });
      return;
    }
    
    if (!pendingForms[targetUserId]) {
      await bot.answerCallbackQuery(callbackQuery.id, { text: "–≠—Ç–∞ –∞–Ω–∫–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" });
      return;
    }
    
    try {
      const { userData, adminMessages, userChatId } = pendingForms[targetUserId];
      const username = userData.username;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–Ω—è—Ç—ã—Ö
      processedForms.accepted.push({
        userId: targetUserId,
        username: username,
        formData: userData.form,
        adminId: adminId,
        adminUsername: adminUsername,
        date: new Date().toLocaleString('ru-RU')
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
      for (const [id, msgData] of Object.entries(adminMessages)) {
        try {
          await bot.editMessageText(
            `‚úÖ –ê–ù–ö–ï–¢–ê –ü–†–ò–ù–Ø–¢–ê ‚úÖ\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} (ID: ${targetUserId}) –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤ —Ö–∞—É—Å –∞–¥–º–∏–Ω–æ–º @${adminUsername} (ID: ${adminId})`,
            {
              chat_id: msgData.chat_id,
              message_id: msgData.message_id
            }
          );
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞ ${id}: ${error}`);
        }
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏
      if (userChatId) {
        await bot.sendMessage(
          userChatId,
          "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–æ–º @" + adminUsername + "! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ö–∞—É—Å Sunset! üéâ"
        );
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
      await bot.sendMessage(
        GROUP_CHAT_ID,
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º @${username} —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–Ω—è—Ç–∏–µ–º –≤ —Ö–∞—É—Å Sunset! üéâ\n–ü—Ä–∏–Ω—è—Ç –∞–¥–º–∏–Ω–æ–º: @${adminUsername} (ID: ${adminId})`
      );
      
      await bot.answerCallbackQuery(callbackQuery.id, { 
        text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç –≤ —Ö–∞—É—Å Sunset!", 
        show_alert: true 
      });
      
      // –£–¥–∞–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
      delete pendingForms[targetUserId];
      
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∞–Ω–∫–µ—Ç—ã: ${error}`);
      
      await bot.answerCallbackQuery(callbackQuery.id, { 
        text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        show_alert: true
      });
    }
  }
  else if (data.startsWith('reject_')) {
    const targetUserId = data.split('_')[1];
    const adminId = callbackQuery.from.id;
    const adminUsername = callbackQuery.from.username || `ID: ${adminId}`;
    
    if (!isAdmin(userId)) {
      await bot.answerCallbackQuery(callbackQuery.id, { text: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è" });
      return;
    }
    
    if (!pendingForms[targetUserId]) {
      await bot.answerCallbackQuery(callbackQuery.id, { text: "–≠—Ç–∞ –∞–Ω–∫–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∫–µ—Ç—ã
    const { userData, adminMessages, userChatId } = pendingForms[targetUserId];
    const username = userData.username;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö
    processedForms.rejected.push({
      userId: targetUserId,
      username: username,
      formData: userData.form,
      adminId: adminId,
      adminUsername: adminUsername,
      date: new Date().toLocaleString('ru-RU')
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    for (const [id, msgData] of Object.entries(adminMessages)) {
      try {
        await bot.editMessageText(
          `‚ùå –ê–ù–ö–ï–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê ‚ùå\n\n–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} (ID: ${targetUserId}) –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º @${adminUsername} (ID: ${adminId})`,
          {
            chat_id: msgData.chat_id,
            message_id: msgData.message_id
          }
        );
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞ ${id}: ${error}`);
      }
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    if (userChatId) {
      await bot.sendMessage(
        userChatId,
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º @" + adminUsername + ". –¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
      );
    }
    
    // –£–¥–∞–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
    delete pendingForms[targetUserId];
    
    await bot.answerCallbackQuery(callbackQuery.id, { 
      text: "–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", 
      show_alert: true 
    });
  }
  else {
    await bot.answerCallbackQuery(callbackQuery.id);
  }
} 