// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Telegram
const TelegramBot = require('node-telegram-bot-api');
const token = '7417777601:AAGy92M0pjoizRHILNT7d72xMNf8a0BkKK8';

const ADMIN_IDS = [
    7683124601,
    1971986164,
    1663401570,
    6844219237,
    1536993655,
    718910310
];

const GROUP_CHAT_ID = '-1001922624396';

let BOT_ID = null;

const userStates = {};
const userForms = {};
const pendingForms = {};
const processedForms = {
    accepted: [],
    rejected: []
};

const STATES = {
    IDLE: 'IDLE',
    AWAITING_NAME: 'AWAITING_NAME',
    AWAITING_AGE: 'AWAITING_AGE',
    AWAITING_TIMEZONE: 'AWAITING_TIMEZONE',
    AWAITING_ACTIVITY: 'AWAITING_ACTIVITY',
    AWAITING_WHY_US: 'AWAITING_WHY_US',
    AWAITING_MINECRAFT_VERSION: 'AWAITING_MINECRAFT_VERSION',
    AWAITING_MINECRAFT_TYPE: 'AWAITING_MINECRAFT_TYPE',
    AWAITING_SERVER_ACTIVITY: 'AWAITING_SERVER_ACTIVITY',
    AWAITING_CHAT_ACTIVITY: 'AWAITING_CHAT_ACTIVITY',
    AWAITING_OTHER_HOUSES: 'AWAITING_OTHER_HOUSES',
    AWAITING_CONFIRMATION: 'AWAITING_CONFIRMATION'
};

function isAdmin(userId) {
    return ADMIN_IDS.includes(Number(userId));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function logDebugState() {
    console.log('==== DEBUG STATE ====');
    console.log(`pendingForms keys: ${JSON.stringify(Object.keys(pendingForms))}`);
    console.log(`userStates count: ${Object.keys(userStates).length}`);
    console.log(`userForms count: ${Object.keys(userForms).length}`);
    console.log('==== END DEBUG STATE ====');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
module.exports = async (req, res) => {
    try {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`[${new Date().toISOString()}] –ü–æ–ª—É—á–µ–Ω ${req.method} –∑–∞–ø—Ä–æ—Å`);
        
        // –î–ª—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if (req.method === 'GET') {
            const bot = new TelegramBot(token);
            try {
                const botInfo = await bot.getMe();
                console.log(`–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: ${botInfo.username} (ID: ${botInfo.id})`);
                BOT_ID = botInfo.id;
                return res.status(200).json({ 
                    status: 'Bot is running', 
                    bot_name: botInfo.username,
                    bot_id: botInfo.id 
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞:', error);
                return res.status(500).json({ 
                    status: 'Bot error', 
                    error: String(error) 
                });
            }
        }
        
        // –î–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram
        if (req.method === 'POST') {
            const update = req.body;
            console.log('WEBHOOK:', JSON.stringify(update).slice(0, 200));
            
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            const bot = new TelegramBot(token);
            
            // –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏
            if (!BOT_ID) {
                try {
                    const botInfo = await bot.getMe();
                    BOT_ID = botInfo.id;
                    console.log(`ID –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω: ${BOT_ID}`);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${error}`);
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            if (update.chat_join_request) {
                const request = update.chat_join_request;
                const chatId = request.chat.id;
                const userId = request.from.id;
                const username = request.from.username || `ID: ${userId}`;
                
                console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} (ID: ${userId})`);
                
                for (const adminId of ADMIN_IDS) {
                    try {
                        await bot.sendMessage(
                            adminId,
                            `üì£ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username} (ID: ${userId}).\n\n` +
                            `–ï—Å–ª–∏ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ—ë –≤ —Å–ø–∏—Å–∫–µ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∞–Ω–∫–µ—Ç (/list)`
                        );
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${adminId}: ${error}`);
                    }
                }
                
                return res.status(200).send('OK');
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (update.message && update.message.text) {
                const chatId = update.message.chat.id;
                const text = update.message.text;
                const userId = update.message.from.id;
                const username = update.message.from.username || `user${userId}`;
                const chatType = update.message.chat.type;
                
                console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${text} –æ—Ç ${chatId}, —Ç–∏–ø —á–∞—Ç–∞: ${chatType}`);
                
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
                if (chatType === 'group' || chatType === 'supergroup') {
                    if (text.startsWith('/start')) {
                        await bot.sendMessage(chatId, 
                            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —Ö–∞—É—Å Sunset, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                        );
                    }
                    // –ù–∏–∫–∞–∫ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
                    return res.status(200).send('OK');
                }
                
                // –î–∞–ª–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                if (text === '/start') {
                    if (isAdmin(userId)) {
                        await bot.sendMessage(chatId, 
                            "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëã\n\n" +
                            "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∞–Ω–∫–µ—Ç –≤ —Ö–∞—É—Å Sunset. " +
                            "–ñ–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —è –±—É–¥—É –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ö –≤–∞–º.\n\n" +
                            "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n" +
                            "/list - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∞–Ω–∫–µ—Ç\n" +
                            "/history_accepted - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–Ω—è—Ç—ã—Ö –∞–Ω–∫–µ—Ç\n" +
                            "/history_rejected - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç"
                        );
                    } else {
                        userStates[chatId] = STATES.AWAITING_NAME;
                        
                        await bot.sendMessage(chatId, 
                            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∞–Ω–∫–µ—Ç –≤ —Ö–∞—É—Å Sunset. " +
                            "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.\n\n" +
                            "üçÇ –£–∫–∞–∂–∏ —Å–≤–æ—ë –ò–º—è + –ù–∏–∫:");
                    }
                    
                    return res.status(200).send('OK');
                } 
                else if (text === '/history_accepted' && isAdmin(userId)) {
                    if (processedForms.accepted.length === 0) {
                        await bot.sendMessage(chatId, "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∞–Ω–∫–µ—Ç –ø—É—Å—Ç–∞.");
                        return res.status(200).send('OK');
                    }
                    
                    let message = `üìã –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∞–Ω–∫–µ—Ç (${processedForms.accepted.length}):\n\n`;
                    
                    for (const form of processedForms.accepted) {
                        message += `üë§ @${form.username} (ID: ${form.userId})\n`;
                        message += `üìù –ò–º—è –∏ –Ω–∏–∫: ${form.formData.name}\n`;
                        message += `üîπ –ü—Ä–∏–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–æ–º: @${form.adminUsername} (ID: ${form.adminId})\n`;
                        message += `üïí –î–∞—Ç–∞: ${form.date}\n\n`;
                    }
                    
                    await bot.sendMessage(chatId, message);
                    return res.status(200).send('OK');
                }
                else if (text === '/history_rejected' && isAdmin(userId)) {
                    if (processedForms.rejected.length === 0) {
                        await bot.sendMessage(chatId, "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –ø—É—Å—Ç–∞.");
                        return res.status(200).send('OK');
                    }
                    
                    let message = `üìã –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç (${processedForms.rejected.length}):\n\n`;
                    
                    for (const form of processedForms.rejected) {
                        message += `üë§ @${form.username} (ID: ${form.userId})\n`;
                        message += `üìù –ò–º—è –∏ –Ω–∏–∫: ${form.formData.name}\n`;
                        message += `üîπ –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º: @${form.adminUsername} (ID: ${form.adminId})\n`;
                        message += `üïí –î–∞—Ç–∞: ${form.date}\n\n`;
                    }
                    
                    await bot.sendMessage(chatId, message);
                    return res.status(200).send('OK');
                }
                else if (text === '/list' && isAdmin(userId)) {
                    const pendingFormsCount = Object.keys(pendingForms).length;
                    
                    if (pendingFormsCount === 0) {
                        await bot.sendMessage(chatId, "–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∞–Ω–∫–µ—Ç.");
                        return res.status(200).send('OK');
                    }
                    
                    let message = `üìã –°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∞–Ω–∫–µ—Ç (${pendingFormsCount}):\n\n`;
                    
                    for (const [userId, formData] of Object.entries(pendingForms)) {
                        const username = formData.userData.username;
                        const form = formData.userData.form;
                        
                        message += `üë§ @${username} (ID: ${userId})\n`;
                        message += `üìù –ò–º—è –∏ –Ω–∏–∫: ${form.name}\n`;
                        message += `üîπ –í–æ–∑—Ä–∞—Å—Ç: ${form.age}\n\n`;
                    }
                    
                    message += "–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /view_[ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è], –Ω–∞–ø—Ä–∏–º–µ—Ä: /view_12345678";
                    
                    await bot.sendMessage(chatId, message);
                    return res.status(200).send('OK');
                }
                else if (text.match(/^\/view_\d+$/) && isAdmin(userId)) {
                    const targetUserId = text.split('_')[1];
                    
                    if (!pendingForms[targetUserId]) {
                        await bot.sendMessage(chatId, "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.");
                        return res.status(200).send('OK');
                    }
                    
                    const { userData } = pendingForms[targetUserId];
                    const username = userData.username;
                    const form = userData.form;
                    
                    const formText = 
                    `–ê–ù–ö–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (ID: ${targetUserId}):

–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${username}

üçÇ –ò–º—è + –ù–∏–∫: ${form.name}
üçÇ –í–æ–∑—Ä–∞—Å—Ç + –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${form.age}
üçÇ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${form.timezone}
üçÇ –ê–∫—Ç–∏–≤/–ù–µ–∞–∫—Ç–∏–≤: ${form.activity}
üçÇ –ü–æ—á–µ–º—É –≤—ã–±—Ä–∞–ª(–∞) –∏–º–µ–Ω–Ω–æ –Ω–∞—Å: ${form.why_us}
üçÇ –í–µ—Ä—Å–∏—è Minecraft: ${form.minecraft_version}
üçÇ –¢–∏–ø: ${form.minecraft_type}
üçÇ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤ —Å—ä—ë–º–∫–∞—Ö: ${form.server_activity}
üçÇ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ (150-200 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é): ${form.chat_activity}
üçÇ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ö–∞—É—Å–∞—Ö: ${form.other_houses}`;
                    
                    await bot.sendMessage(chatId, formText, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '–ü—Ä–∏–Ω—è—Ç—å –≤ —Ö–∞—É—Å ‚úÖ', callback_data: `accept_${targetUserId}` },
                                    { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå', callback_data: `reject_${targetUserId}` }
                                ]
                            ]
                        }
                    });
                    
                    return res.status(200).send('OK');
                }
                else if (text === '/cancel') {
                    if (isAdmin(userId)) {
                        await bot.sendMessage(chatId, "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å, –≤—ã - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.");
                        return res.status(200).send('OK');
                    }
                    
                    userStates[chatId] = STATES.IDLE;
                    delete userForms[chatId];
                    
                    await bot.sendMessage(chatId, "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.");
                    return res.status(200).send('OK');
                }
                else if (!text.startsWith('/') && !isAdmin(userId)) {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    const currentState = userStates[chatId] || STATES.IDLE;
                    
                    switch (currentState) {
                        case STATES.AWAITING_NAME:
                            if (!userForms[chatId]) userForms[chatId] = {};
                            userForms[chatId].name = text;
                            userStates[chatId] = STATES.AWAITING_AGE;
                            await bot.sendMessage(chatId, "üçÇ –£–∫–∞–∂–∏ —Å–≤–æ–π –í–æ–∑—Ä–∞—Å—Ç + –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (–≤–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 12+ –ª–µ—Ç):");
                            break;
                            
                        case STATES.AWAITING_AGE:
                            userForms[chatId].age = text;
                            userStates[chatId] = STATES.AWAITING_TIMEZONE;
                            await bot.sendMessage(chatId, "üçÇ –£–∫–∞–∂–∏ —Å–≤–æ–π –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:");
                            break;
                            
                        case STATES.AWAITING_TIMEZONE:
                            userForms[chatId].timezone = text;
                            userStates[chatId] = STATES.AWAITING_ACTIVITY;
                            await bot.sendMessage(chatId, "üçÇ –¢—ã –ê–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫?");
                            break;
                            
                        case STATES.AWAITING_ACTIVITY:
                            userForms[chatId].activity = text;
                            userStates[chatId] = STATES.AWAITING_WHY_US;
                            await bot.sendMessage(chatId, "üçÇ –ü–æ—á–µ–º—É —Ç—ã –≤—ã–±—Ä–∞–ª(–∞) –∏–º–µ–Ω–Ω–æ –Ω–∞—à —Ö–∞—É—Å Sunset?");
                            break;
                            
                        case STATES.AWAITING_WHY_US:
                            userForms[chatId].why_us = text;
                            userStates[chatId] = STATES.AWAITING_MINECRAFT_VERSION;
                            await bot.sendMessage(chatId, "üçÇ –£–∫–∞–∂–∏ –≤–µ—Ä—Å–∏—é Minecraft, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –∏–≥—Ä–∞–µ—à—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.20.1):");
                            break;
                            
                        case STATES.AWAITING_MINECRAFT_VERSION:
                            userForms[chatId].minecraft_version = text;
                            userStates[chatId] = STATES.AWAITING_MINECRAFT_TYPE;
                            await bot.sendMessage(chatId, "üçÇ –£–∫–∞–∂–∏ —Ç–∏–ø Minecraft (Java –∏–ª–∏ Bedrock):");
                            break;
                            
                        case STATES.AWAITING_MINECRAFT_TYPE:
                            userForms[chatId].minecraft_type = text;
                            userStates[chatId] = STATES.AWAITING_SERVER_ACTIVITY;
                            
                            const typeLower = text.toLowerCase();
                            if (!typeLower.includes('java')) {
                                await bot.sendMessage(chatId, 
                                    "‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ö–∞—É—Å Sunset —Ç—Ä–µ–±—É–µ—Ç—Å—è Java-–≤–µ—Ä—Å–∏—è Minecraft.\n" +
                                    "–í—ã —É–∫–∞–∑–∞–ª–∏: " + text + ". –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.\n\n" +
                                    "–ï—Å–ª–∏ —É –≤–∞—Å –≤—Å–µ-—Ç–∞–∫–∏ Java-–≤–µ—Ä—Å–∏—è, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º:");
                            }
                            
                            await bot.sendMessage(chatId, "üçÇ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –±—É–¥–µ—à—å –∞–∫—Ç–∏–≤–µ–Ω/–∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤ —Å—ä—ë–º–∫–∞—Ö:");
                            break;
                            
                        case STATES.AWAITING_SERVER_ACTIVITY:
                            userForms[chatId].server_activity = text;
                            userStates[chatId] = STATES.AWAITING_CHAT_ACTIVITY;
                            await bot.sendMessage(chatId, "üçÇ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –±—É–¥–µ—à—å –∞–∫—Ç–∏–≤–µ–Ω/–∞–∫—Ç–∏–≤–Ω–∞ –≤ —á–∞—Ç–µ (–Ω–∞—à–∞ –Ω–æ—Ä–º–∞ 150-200 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é):");
                            break;
                            
                        case STATES.AWAITING_CHAT_ACTIVITY:
                            userForms[chatId].chat_activity = text;
                            userStates[chatId] = STATES.AWAITING_OTHER_HOUSES;
                            await bot.sendMessage(chatId, "üçÇ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –¥—Ä—É–≥–∏—Ö —Ö–∞—É—Å–∞—Ö/–∫–æ–º–∞–Ω–¥–∞—Ö:");
                            break;
                            
                        case STATES.AWAITING_OTHER_HOUSES:
                            userForms[chatId].other_houses = text;
                            userStates[chatId] = STATES.AWAITING_CONFIRMATION;
                            
                            const ageStr = userForms[chatId].age.toLowerCase();
                            let meetsAgeRequirement = false;
                            let meetsJavaRequirement = false;
                            
                            const ageMatch = ageStr.match(/(\d+)/);
                            if (ageMatch && parseInt(ageMatch[1]) >= 12) {
                                meetsAgeRequirement = true;
                            }
                            
                            const minecraft_type = userForms[chatId].minecraft_type.toLowerCase();
                            if (minecraft_type.includes('java')) {
                                meetsJavaRequirement = true;
                            }
                            
                            if (!meetsAgeRequirement || !meetsJavaRequirement) {
                                let errorMessage = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:\n\n";
                                
                                if (!meetsAgeRequirement) {
                                    errorMessage += "- –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 12 –ª–µ—Ç –∏–ª–∏ —Å—Ç–∞—Ä—à–µ\n";
                                }
                                
                                if (!meetsJavaRequirement) {
                                    errorMessage += "- –¢—Ä–µ–±—É–µ—Ç—Å—è Java-–≤–µ—Ä—Å–∏—è Minecraft\n";
                                }
                                
                                errorMessage += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ —Å —É—á–µ—Ç–æ–º —ç—Ç–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (/start).";
                                
                                await bot.sendMessage(chatId, errorMessage);
                                userStates[chatId] = STATES.IDLE;
                                delete userForms[chatId];
                                return res.status(200).send('OK');
                            }
                            
                            const formText = 
                            `–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:

üçÇ –ò–º—è + –ù–∏–∫: ${userForms[chatId].name}
üçÇ –í–æ–∑—Ä–∞—Å—Ç + –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${userForms[chatId].age}
üçÇ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${userForms[chatId].timezone}
üçÇ –ê–∫—Ç–∏–≤/–ù–µ–∞–∫—Ç–∏–≤: ${userForms[chatId].activity}
üçÇ –ü–æ—á–µ–º—É –≤—ã–±—Ä–∞–ª(–∞) –∏–º–µ–Ω–Ω–æ –Ω–∞—Å: ${userForms[chatId].why_us}
üçÇ –í–µ—Ä—Å–∏—è Minecraft: ${userForms[chatId].minecraft_version}
üçÇ –¢–∏–ø: ${userForms[chatId].minecraft_type}
üçÇ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤ —Å—ä—ë–º–∫–∞—Ö: ${userForms[chatId].server_activity}
üçÇ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ (150-200 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–¥–µ–ª—é): ${userForms[chatId].chat_activity}
üçÇ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ö–∞—É—Å–∞—Ö: ${userForms[chatId].other_houses}`;
                            
                            const options = {
                                reply_markup: {
                                    inline_keyboard: [
                                        [
                                            { text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data: 'confirm' },
                                            { text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ ‚ùå', callback_data: 'restart' }
                                        ]
                                    ]
                                }
                            };
                            
                            await bot.sendMessage(chatId, formText + "\n\n–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", options);
                            break;
                            
                        default:
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–≤–µ—á–∞—Ç—å
                            if (chatType === 'private') {
                                await bot.sendMessage(chatId, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å /start");
                            }
                            break;
                    }
                }
                
                return res.status(200).send('OK');
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
            if (update.callback_query) {
                const callbackQuery = update.callback_query;
                const message = callbackQuery.message;
                const chatId = message.chat.id;
                const userId = callbackQuery.from.id;
                const data = callbackQuery.data;
                
                console.log(`–ü–æ–ª—É—á–µ–Ω callback_query: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
                const isGroupChat = (message.chat.type === 'group' || message.chat.type === 'supergroup');
                
                // –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∞—á–∞–ª–∞/–æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è,
                // —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if (data === 'confirm' && userStates[chatId] === STATES.AWAITING_CONFIRMATION) {
                    // –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: "–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ",
                        show_alert: true
                    });
                    
                    await bot.sendMessage(chatId, "–ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é!");
                    userStates[chatId] = STATES.IDLE;
                    
                    console.log("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã");
                    return res.status(200).send('OK');
                }
                else if (data === 'restart') {
                    // –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ",
                        show_alert: true
                    });
                    
                    await bot.sendMessage(chatId, "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ù–∞–ø–∏—à–∏ /start");
                    userStates[chatId] = STATES.IDLE;
                    
                    console.log("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∫–µ—Ç—ã");
                    return res.status(200).send('OK');
                }
                else if (data.startsWith('accept_') || data.startsWith('reject_')) {
                    // –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: data.startsWith('accept_') ? "–ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞" : "–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                        show_alert: true
                    });
                    
                    console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ ${data}`);
                    return res.status(200).send('OK');
                }
                else {
                    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                    await bot.answerCallbackQuery(callbackQuery.id, {
                        text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                        show_alert: true
                    });
                    
                    console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${data}`);
                    return res.status(200).send('OK');
                }
            }
            
            return res.status(200).send('OK');
        }
        
        // –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
        return res.status(405).json({ error: 'Method not allowed' });
        
    } catch (error) {
        console.error('–û–®–ò–ë–ö–ê:', error);
        return res.status(500).json({
            error: String(error),
            location: 'webhook handler',
            stack: error.stack
        });
    }
}; 