const express = require('express');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');

console.log('‚≠ê –ó–∞–ø—É—Å–∫ server.js...');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN || '7417777601:AAGy92M0pjoizRHILNT7d72xMNf8a0BkKK8';

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
const port = process.env.PORT || 3000;

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
let bot;
try {
  // –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Vercel, –º–æ–∂–Ω–æ –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤–µ–±—Ö—É–∫ –∑–¥–µ—Å—å,
  // –æ–Ω –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ api/webhook.js
  if (process.env.VERCEL_URL) {
    bot = new TelegramBot(token);
    console.log('ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ø–æ–ª–ª–∏–Ω–≥–∞ (–¥–ª—è Vercel)');
  } else {
    bot = new TelegramBot(token, { polling: true });
    console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)');
  }
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', error);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let stats = {
  botStartTime: new Date(),
  pendingForms: 0,
  acceptedForms: 0,
  rejectedForms: 0,
  lastActivity: null,
  isRunning: true
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ EJS –∫–∞–∫ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
  try {
    // –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    stats.lastActivity = new Date();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/', (req, res) => {
  updateStats();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞
  let botStatus = 'unknown';
  
  if (bot) {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot.getMe()
      .then(botInfo => {
        res.render('index', { 
          stats: {
            ...stats,
            botInfo: botInfo
          },
          uptime: getUptime(stats.botStartTime)
        });
      })
      .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞:', error);
        res.render('index', { 
          stats: {
            ...stats,
            botInfo: null,
            error: error.message
          },
          uptime: getUptime(stats.botStartTime)
        });
      });
  } else {
    res.render('index', { 
      stats: {
        ...stats,
        botInfo: null,
        error: '–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
      },
      uptime: getUptime(stats.botStartTime)
    });
  }
});

// API –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
app.post('/api/restart', (req, res) => {
  try {
    stats.isRunning = true;
    stats.botStartTime = new Date();
    
    if (bot) {
      bot.getMe().then(botInfo => {
        res.json({ 
          success: true, 
          message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω',
          botInfo: botInfo
        });
      }).catch(error => {
        res.status(500).json({ 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: ' + error.message 
        });
      });
    } else {
      res.status(500).json({ 
        success: false, 
        message: '–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' 
      });
    }
  } catch (error) {
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: ' + error.message 
    });
  }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
app.get('/api/status', async (req, res) => {
  try {
    if (bot) {
      const botInfo = await bot.getMe();
      res.json({ 
        status: 'online',
        botInfo: botInfo,
        uptime: getUptime(stats.botStartTime)
      });
    } else {
      res.json({ 
        status: 'offline',
        error: '–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
        uptime: getUptime(stats.botStartTime)
      });
    }
  } catch (error) {
    res.json({ 
      status: 'error',
      error: error.message,
      uptime: getUptime(stats.botStartTime)
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
function getUptime(startTime) {
  const uptime = new Date() - startTime;
  const days = Math.floor(uptime / (1000 * 60 * 60 * 24));
  const hours = Math.floor((uptime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((uptime % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((uptime % (1000 * 60)) / 1000);
  
  return `${days}–¥ ${hours}—á ${minutes}–º ${seconds}—Å`;
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (!process.env.VERCEL_URL) {
  app.listen(port, () => {
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  });
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞
console.log('‚úÖ server.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel
module.exports = app; 